/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CC10.CC10;

import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testStack() {
        Stack<String> list = new Stack<>();
        list.pushStack("5");
        list.pushStack("13");
        list.pushStack("11");
        System.out.println(list.popStack());
        list.popStack();
        list.popStack();
        assertEquals(true, list.isEmpty());
        list.pushStack("1");
        list.pushStack("2");
        list.pushStack("3");
        list.pushStack("4");
        list.pushStack("5");
        list.pushStack("6");
        assertEquals("6" , list.peek());
        list.pushStack("50");
        list.pushStack("680");
        assertEquals("680" , list.peek());
        assertEquals("Stack of size and top value is {maxSize=8, top=680}",list.toString());
        assertEquals(false , list.isEmpty());
    }
    @Test public  void testQueue(){
        Queue<String> queue = new Queue<>();
        queue.enQueue("9");
        queue.enQueue("8");
        queue.enQueue("7");
        queue.deQueue();
        queue.deQueue();
        assertEquals(false,queue.isEmpty());
        queue.enQueue("11");
        queue.enQueue("13");
        queue.enQueue("14");
        queue.enQueue("15");
        queue.enQueue("19");
        queue.enQueue("22");
        queue.enQueue("29");
        queue.enQueue("82");
        assertEquals("{ 7 } -> { 11 } -> { 13 } -> { 14 } -> { 15 } -> { 19 } -> { 22 } -> { 29 } -> { 82 } -> Null" , queue.toString());
        queue.deQueue();
        assertEquals("11",queue.peekQueue());
        assertEquals(false,queue.isEmpty());
        assertEquals("{ 11 } -> { 13 } -> { 14 } -> { 15 } -> { 19 } -> { 22 } -> { 29 } -> { 82 } -> Null" , queue.toString());
    }
    @Test public void testPseudo(){
        pseudoQueue<Integer> pseudo = new pseudoQueue<>();
        pseudo.enQueue(5);
        System.out.println(pseudo.toString());
        pseudo.deQueue();
        pseudo.enQueue(6);
        System.out.println(pseudo.toString());
        pseudo.enQueue(7);
        System.out.println(pseudo.toString());
        pseudo.enQueue(8);
        System.out.println(pseudo.toString());
        pseudo.enQueue(9);
        System.out.println(pseudo.toString());
        pseudo.deQueue();
        assertEquals("pseudoQueue{stack1=Stack of size and top value is {maxSize=3, top=9}}", pseudo.toString());
    }
    @Test public void testShilterAnimal(){
        AnimalShelter<String> animal = new AnimalShelter<String>("cat");
        animal.enqueue(animal.getType());
        assertEquals("cat" , animal.getType());
        AnimalShelter<String> animall = new AnimalShelter<>("dog");
        assertEquals("pref is DOG" , animall.dequeue(animall.getType()));
    }
}
